// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`query builder creates mutations 1`] = `"mutation { m0: insert_compute_Application_one (object: {name: "<application_name>", platform: "<application_platform>", origin: "test-origin"}, on_conflict: {constraint: compute_Application_pkey, update_columns: [refreshedAt, name, platform, origin]}) { id } m1: insert_cicd_Organization_one (object: {uid: "<organization_uid>", source: "<organization_source>", origin: "test-origin"}, on_conflict: {constraint: cicd_Organization_pkey, update_columns: [refreshedAt, uid, source, origin]}) { id } m2: insert_cicd_Pipeline_one (object: {uid: "<pipeline_uid>", organization: {data: {uid: "<organization_uid>", source: "<organization_source>"}, on_conflict: {constraint: cicd_Organization_pkey, update_columns: [refreshedAt]}}, origin: "test-origin"}, on_conflict: {constraint: cicd_Pipeline_pkey, update_columns: [refreshedAt, uid, organizationId, origin]}) { id } m3: insert_cicd_Build_one (object: {uid: "<cicd_Build>", pipeline: {data: {uid: "<pipeline_uid>", organization: {data: {uid: "<organization_uid>", source: "<organization_source>"}, on_conflict: {constraint: cicd_Organization_pkey, update_columns: [refreshedAt]}}}, on_conflict: {constraint: cicd_Pipeline_pkey, update_columns: [refreshedAt]}}, name: "<build_name>", origin: "test-origin"}, on_conflict: {constraint: cicd_Build_pkey, update_columns: [refreshedAt, uid, pipelineId, name, origin]}) { id } m4: insert_cicd_Deployment_one (object: {uid: "<deployment_uid", source: "<deployment_source>", application: {data: {name: "<application_name>", platform: "<application_platform>"}, on_conflict: {constraint: compute_Application_pkey, update_columns: [refreshedAt]}}, build: {data: {uid: "<cicd_Build>", pipeline: {data: {uid: "<pipeline_uid>", organization: {data: {uid: "<organization_uid>", source: "<organization_source>"}, on_conflict: {constraint: cicd_Organization_pkey, update_columns: [refreshedAt]}}}, on_conflict: {constraint: cicd_Pipeline_pkey, update_columns: [refreshedAt]}}, name: "<build_name>"}, on_conflict: {constraint: cicd_Build_pkey, update_columns: [refreshedAt]}}, status: {category: "Success", detail: "<status_detail>"}, origin: "test-origin"}, on_conflict: {constraint: cicd_Deployment_pkey, update_columns: [refreshedAt, uid, source, applicationId, buildId, status, origin]}) { id } }"`;

exports[`query builder creates mutations with non-model objects 1`] = `"mutation { m0: insert_qa_TestCase_one (object: {uid: "<uid>", source: "<source>", name: "<name>", before: [{description: "<description>", condition: "<condition>"}], after: [{description: "<description>", condition: "<condition>"}], tags: "{\\"tag1\\",\\"tag2\\"}", qa_DeviceInfo: {name: "name", os: "os", browser: "browser", isSupported: true, size: 10}, origin: "test-origin"}, on_conflict: {constraint: qa_TestCase_pkey, update_columns: [refreshedAt, uid, source, name, before, after, tags, qa_DeviceInfo, origin]}) { id } }"`;

exports[`query builder creates mutations with undefined and null fields 1`] = `"mutation { m0: insert_qa_TestCase_one (object: {uid: "<uid>", source: "<source>", name: "<name>", before: null, after: null, tags: "{\\"tag1\\",\\"tag2\\"}", origin: "test-origin"}, on_conflict: {constraint: qa_TestCase_pkey, update_columns: [refreshedAt, uid, source, name, before, after, tags, origin]}) { id } }"`;

exports[`query builder delete mutations with model refs 1`] = `"mutation { m0: delete_cicd_Deployment (where: {uid: {_eq: "<deployment_uid"}, source: {_eq: "<deployment_source>"}, application: {name: {_eq: "<application_name>"}, platform: {_eq: "<application_platform>"}}, build: {uid: {_eq: "<cicd_Build>"}, pipeline: {uid: {_eq: "<pipeline_uid>"}, organization: {uid: {_eq: "<organization_uid>"}, source: {_eq: "<organization_source>"}}}, name: {_eq: "<build_name>"}}, status: {_eq: {category: "Success", detail: "<status_detail>"}}}) { returning { id } } m1: delete_cicd_Build (where: {uid: {_eq: "<cicd_Build>"}, pipeline: {uid: {_eq: "<pipeline_uid>"}, organization: {uid: {_eq: "<organization_uid>"}, source: {_eq: "<organization_source>"}}}, name: {_eq: "<build_name>"}}) { returning { id } } }"`;

exports[`query builder delete mutations with non-model objects 1`] = `"mutation { m0: delete_qa_TestCase (where: {uid: {_eq: "<uid>"}, source: {_eq: "<source>"}, name: {_eq: "<name>"}, before: null, after: null, tags: {_eq: "{\\"tag1\\",\\"tag2\\"}"}}) { returning { id } } }"`;

exports[`query builder delete undefined ref 1`] = `"mutation { m0: delete_cicd_Pipeline (where: {uid: {_eq: "<pipeline_uid>"}, organizationId: {_is_null: true}}) { returning { id } } }"`;

exports[`query builder upsert undefined ref 1`] = `"mutation { m0: insert_cicd_Pipeline_one (object: {uid: "<pipeline_uid>", organization: null, origin: "test-origin"}, on_conflict: {constraint: cicd_Pipeline_pkey, update_columns: [refreshedAt, uid, organizationId, origin]}) { id } }"`;

exports[`query builder upsert with conflict override 1`] = `"mutation { m0: insert_org_ApplicationOwnership_one (object: {team: {data: {uid: "test_team"}, on_conflict: {constraint: org_Team_pkey, update_columns: [refreshedAt]}}, application: {data: {name: "test_app", platform: "test_platform"}, on_conflict: {constraint: compute_Application_pkey, update_columns: [refreshedAt]}}, origin: "test-origin"}, on_conflict: {constraint: org_ApplicationOwnership_application_id_unique, update_columns: [teamId, refreshedAt, origin]}) { id } }"`;
